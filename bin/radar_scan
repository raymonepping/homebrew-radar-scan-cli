#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2034
VERSION="1.0.10"

# --- Vault Radar/HCP config loader ---
load_vault_env_config() {
  local env_file=""
  if [[ -f "./.vault-config.env" ]]; then
    env_file="./.vault-config.env"
  elif [[ -f "${HOME}/.vault-config.env" ]]; then
    env_file="${HOME}/.vault-config.env"
  fi

  if [[ -n "$env_file" ]]; then
    # Only load safe lines, ignore comments and blanks
    set -a
    # shellcheck disable=SC1090
    source <(grep -E '^[A-Za-z_][A-Za-z0-9_]*=' "$env_file")
    set +a
  fi
}

load_vault_env_config

# --- Homebrew & local lookup ---
HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"

POSSIBLE_LIB_DIRS=(
  "$HOMEBREW_PREFIX/share/radar-scan-cli/lib"
  "$HOMEBREW_PREFIX/opt/radar-scan-cli/share/radar-scan-cli/lib"
  "./lib"
)

LIB_DIR=""
for d in "${POSSIBLE_LIB_DIRS[@]}"; do
  if [[ -d "$d" ]]; then
    LIB_DIR="$d"
    break
  fi
done
if [[ -z "$LIB_DIR" ]]; then
  echo "‚ùå Could not locate lib/ directory. Searched: ${POSSIBLE_LIB_DIRS[*]}"
  exit 1
fi

if [[ -f "$LIB_DIR/scan_output.sh" ]]; then
  # shellcheck disable=SC1091
  source "$LIB_DIR/scan_output.sh"
else
  echo "‚ùå Could not find scan_output.sh in $LIB_DIR"
  exit 1
fi

POSSIBLE_TPL_DIRS=(
  "$HOMEBREW_PREFIX/share/radar-scan-cli/tpl"
  "$HOMEBREW_PREFIX/opt/radar-scan-cli/share/radar-scan-cli/tpl"
  "./tpl"
)

TPL_DIR=""
for t in "${POSSIBLE_TPL_DIRS[@]}"; do
  if [[ -d "$t" ]]; then
    TPL_DIR="$t"
    break
  fi
done
if [[ -z "$TPL_DIR" ]]; then
  echo "‚ùå Could not locate tpl/ directory. Searched: ${POSSIBLE_TPL_DIRS[*]}"
  exit 1
fi

# Set template for Markdown reports
MD_TEMPLATE="$TPL_DIR/radar_agent.tpl"

DEFAULT_REPO_JSON="${HOME}/.scan.repositories.json"

# On first use, check if the file exists in $HOME; otherwise, fall back to local dir
if [[ -f "$DEFAULT_REPO_JSON" ]]; then
  REPO_JSON="$DEFAULT_REPO_JSON"
elif [[ -f ".scan.repositories.json" ]]; then
  REPO_JSON=".scan.repositories.json"
else
  echo "‚ùå Repo JSON file not found in \$HOME or local directory."
  exit 1
fi

DEFAULT_FORMAT="csv"
DEFAULT_TYPE="repo"
USER_OUTFILE=""

# --- .radarignore support ---
# Looks for local .radarignore, then $HOME/.radarignore, then falls back to built-in
RADAR_IGNORE_FILE=""
if [[ -f .radarignore ]]; then
  RADAR_IGNORE_FILE=".radarignore"
elif [[ -f "$HOME/.radarignore" ]]; then
  RADAR_IGNORE_FILE="$HOME/.radarignore"
fi

# fallback built-in ignore
BUILTIN_RADAR_IGNORES='/etc/passwd|/etc/shadow'

show_help() {
  cat <<EOF
Usage:
  $(basename "$0") [--type repo|folder|file|docker-image] [options] [ARG]

  --type <mode>   Scan type: repo (default, batch via JSON), folder, file, or docker-image(s) via a .scan.images.json file
  --image <ref>   Docker image name:tag (for --type docker-image)
  --format <fmt>  Output format: csv (default), json, sarif, md (Markdown report)
  --disable-ui    Suppress CLI UI/log output
  --offline       Run scans in offline mode (no HCP)
  --outfile, -o   Output filename for result file (csv/json/md)
  --help          Show this help and exit
  --version       Show version and exit

  For --type repo:
      ARG is optional, defaults to $DEFAULT_REPO_JSON (a list of repos to scan)
  For --type file/folder:
      ARG is required and should be the path to scan
  For --type docker-image:
      --image is required and should be the image:tag to scan

  Note: If no secrets are found, the scan output file will be deleted.
        If --format md, a Markdown report is created only if findings exist.
EOF
}

# --- Defaults ---
TYPE="$DEFAULT_TYPE"
FORMAT="$DEFAULT_FORMAT"
REPO_JSON="$DEFAULT_REPO_JSON"
DISABLE_UI=""
OFFLINE=""
PATH_ARG=""
IMAGE_ARG=""

# --- Argument parsing ---
while [[ $# -gt 0 ]]; do
  case "$1" in
  --type)
    TYPE="$2"
    shift 2
    ;;
  --image)
    IMAGE_ARG="$2"
    shift 2
    ;;
  --format | --output)
    FORMAT="$2"
    shift 2
    ;;
  --outfile | -o)
    USER_OUTFILE="$2"
    shift 2
    ;;
  --disable-ui)
    DISABLE_UI="--disable-ui"
    shift
    ;;
  --offline)
    OFFLINE="--offline"
    shift
    ;;
  --help)
    show_help
    exit 0
    ;;
  --version)
    echo "$(basename "$0") v$VERSION"
    exit 0
    ;;
  -*)
    echo "‚ùå Unknown flag: $1"
    show_help
    exit 1
    ;;
  *)
    if [[ -z "$PATH_ARG" ]]; then
      PATH_ARG="$1"
      shift
    else
      echo "‚ùå Unexpected extra argument: $1"
      show_help
      exit 1
    fi
    ;;
  esac
done

RADAR_IGNORE_SHOWN=0

filter_scan_output() {
  local infile="$1"
  local outfile="$2"

  local ignore_pattern=""
  if [[ -n "$RADAR_IGNORE_FILE" ]]; then
    ignore_pattern=$(grep -vE '^\s*#|^\s*$' "$RADAR_IGNORE_FILE" | tr '\n' '|' | sed 's/|$//')
  else
    ignore_pattern="$BUILTIN_RADAR_IGNORES"
  fi

  if [[ "$infile" == *.csv ]]; then
    {
      head -n1 "$infile"
      tail -n +2 "$infile" | awk -F, -v IGNORE="$ignore_pattern" '
        BEGIN {OFS=FS}
        $8 !~ IGNORE
      '
    } > "$outfile"
  else
    # For JSON or other formats, just grep
    if [[ -n "$ignore_pattern" ]]; then
      grep -Ev "$ignore_pattern" "$infile" > "$outfile"
    else
      cp "$infile" "$outfile"
    fi
  fi
}

print_divider() { echo "----------------------------------------"; }

timestamp="$(date +%Y%m%d_%H%M%S)"

# Check required tool
if ! command -v vault-radar &>/dev/null; then
  echo "‚ùå vault-radar is required but not installed or not in \$PATH. Exiting."
  echo "‚ÑπÔ∏è  Install it via; brew tap hashicorp/tap & brew install vault-radar"
  exit 1
fi

if [[ "$FORMAT" == "md" ]]; then
  OUTPUT_FORMAT="json"
else
  OUTPUT_FORMAT="$FORMAT"
fi

# --- Repo scan ---
if [[ "$TYPE" == "repo" ]]; then
  [[ -n "$PATH_ARG" ]] && REPO_JSON="$PATH_ARG"
  if [[ ! -f "$REPO_JSON" ]]; then
    echo "‚ùå Repo JSON file not found: $REPO_JSON"
    exit 1
  fi
  if ! command -v jq &>/dev/null; then
    echo "‚ùå jq is required for repo mode."
    exit 1
  fi

  repos_len=$(jq length "$REPO_JSON")
  overall_found=0

  if [[ -n "$RADAR_IGNORE_FILE" ]]; then
    echo "‚ÑπÔ∏è  Using Vault Radar ignore file: $RADAR_IGNORE_FILE"
  else
    echo "‚ÑπÔ∏è  Using built-in ignore pattern: $BUILTIN_RADAR_IGNORES"
  fi

  for ((i = 0; i < repos_len; i++)); do
    name=$(jq -r ".[$i].name" "$REPO_JSON")
    url=$(jq -r ".[$i].url" "$REPO_JSON")
    name_safe="$(safe_name "$name")"

    if [[ "$FORMAT" == "md" ]]; then
      OUTFILE_JSON="scan_${name_safe}_${timestamp}.json"
      OUTFILE_MD="${USER_OUTFILE:-scan_${name_safe}_${timestamp}.md}"
    else
      OUTFILE_JSON="${USER_OUTFILE:-scan_${name_safe}_${timestamp}.${OUTPUT_FORMAT}}"
      OUTFILE_MD=""
    fi

    baseline="baseline_${name_safe}.${OUTPUT_FORMAT}"

    echo "üîç Scanning [repo] $name at $url ..."
    scan_cmd=(vault-radar scan repo --url "$url" --outfile "$OUTFILE_JSON" --format "$OUTPUT_FORMAT")
    [[ -n "$DISABLE_UI" ]] && scan_cmd+=("$DISABLE_UI")
    [[ -n "$OFFLINE" ]] && scan_cmd+=("$OFFLINE")
    [[ -f "$baseline" && -s "$baseline" ]] && scan_cmd+=(--baseline "$baseline")
    [[ -n "${DEBUG:-}" ]] && echo "[debug] ${scan_cmd[*]}"
    "${scan_cmd[@]}"

    # Calculate findings only from JSON used for output
    if [[ "$FORMAT" == "md" ]]; then
      findings=$(do_json_findings "$OUTFILE_JSON")
    elif [[ "$OUTPUT_FORMAT" == "csv" ]]; then
      findings=$(do_csv_findings "$OUTFILE_JSON")
    elif [[ "$OUTPUT_FORMAT" == "json" ]]; then
      findings=$(do_json_findings "$OUTFILE_JSON")
    else
      findings=0
    fi

    findings="$(echo "$findings" | xargs)" # This will *always* strip spaces

    if [[ $findings -gt 0 && -f "$OUTFILE_JSON" ]]; then

      if [[ "$FORMAT" == "md" ]]; then
        render_markdown_report "$OUTFILE_JSON" "$OUTFILE_MD" "$MD_TEMPLATE"
        printf "üõë %s secrets found in [%s] (see %s)\n" "$findings" "$name" "$OUTFILE_MD"
        echo "üìù Markdown report generated: $OUTFILE_MD"
        rm -f "$OUTFILE_JSON"
        cp "$OUTFILE_MD" "$baseline" 2>/dev/null || true

      else
        printf "üõë %s secrets found in [%s] (see %s)\n" "$findings" "$name" "$OUTFILE_JSON"
        echo "‚ÑπÔ∏è  Scan output: $OUTFILE_JSON"
        [[ "$FORMAT" == "csv" ]] && grep -v '^category' "$OUTFILE_JSON" | awk -F, '{print "‚Ä¢ " $2 " in " $8 " (line: " $10 ")"}'
        [[ "$FORMAT" == "json" ]] && jq -c '.' "$OUTFILE_JSON" | while read -r obj; do echo "$obj" | jq -r '"‚Ä¢ \(.category) in \(.path) (\(.textual_context // "-"))"'; done
        cp "$OUTFILE_JSON" "$baseline"

      fi
      overall_found=$((overall_found + findings))

    else
      echo "‚úÖ No secrets found in [$name]."
      echo "üö¶ Battle-tested. Clean."
      rm -f "$OUTFILE_JSON" "$OUTFILE_MD" 2>/dev/null || true
    fi

    print_divider

  done
  echo
  echo "=== Scan complete. Total secrets found across all repos: $overall_found ==="

# --- Docker image scan ---
elif [[ "$TYPE" == "docker-image" ]]; then
  [[ -z "$IMAGE_ARG" ]] && {
    echo "‚ùå --image <docker-image> required with --type docker-image"
    show_help
    exit 1
  }
  image_safe="$(safe_name "$IMAGE_ARG")"
  if [[ "$FORMAT" == "md" ]]; then
    OUTFILE_JSON="scan_${image_safe}_${timestamp}.json"
    OUTFILE_MD="${USER_OUTFILE:-scan_${image_safe}_${timestamp}.md}"
  else
    OUTFILE_JSON="${USER_OUTFILE:-scan_${image_safe}_${timestamp}.${OUTPUT_FORMAT}}"
    OUTFILE_MD=""
  fi

scan_cmd=(vault-radar scan docker-image --image "$IMAGE_ARG" --outfile "$OUTFILE_JSON" --format "$OUTPUT_FORMAT")
[[ -n "$DISABLE_UI" ]] && scan_cmd+=("$DISABLE_UI")
[[ -n "$OFFLINE" ]] && scan_cmd+=("$OFFLINE")



echo "üîç Scanning docker image [$IMAGE_ARG] ..."
[[ -n "${DEBUG:-}" ]] && echo "[debug] ${scan_cmd[*]}"
"${scan_cmd[@]}"

# --- Filter scan output using .radarignore if present ---
FILTERED_JSON="${OUTFILE_JSON%.json}.filtered.json"
filter_scan_output "$OUTFILE_JSON" "$FILTERED_JSON"

if [[ "$FORMAT" == "md" ]]; then
  findings=$(do_json_findings "$FILTERED_JSON")
elif [[ "$OUTPUT_FORMAT" == "csv" ]]; then
  findings=$(do_csv_findings "$FILTERED_JSON")
elif [[ "$OUTPUT_FORMAT" == "json" ]]; then
  findings=$(do_json_findings "$FILTERED_JSON")
else
  findings=0
fi

findings="$(echo "$findings" | xargs)"

if [[ -f "$FILTERED_JSON" && "$findings" -gt 0 ]]; then
  if [[ "$FORMAT" == "md" ]]; then
    render_markdown_report "$FILTERED_JSON" "$OUTFILE_MD" "$MD_TEMPLATE"
    printf "üõë %s secrets found in docker image %s (see %s)\n" "$findings" "$image_ref" "$OUTFILE_MD"
    echo "üìù Markdown report generated: $OUTFILE_MD"
    rm -f "$FILTERED_JSON"
  else
    printf "üõë %s secrets found in docker image %s (see %s)\n" "$findings" "$image_ref" "$FILTERED_JSON"
    echo "‚ÑπÔ∏è  Scan output: $FILTERED_JSON"
    [[ "$FORMAT" == "csv" ]] && grep -v '^category' "$FILTERED_JSON" | awk -F, '{print "‚Ä¢ " $2 " in " $8 " (line: " $10 ")"}'
    [[ "$FORMAT" == "json" ]] && jq -c '.' "$FILTERED_JSON" | while read -r obj; do echo "$obj" | jq -r '"‚Ä¢ \(.category) in \(.path) (\(.textual_context // "-"))"'; done
  fi
  overall_found=$((overall_found + findings))
else
  echo "‚úÖ No secrets found in docker image $image_ref."
  echo "üö¶ Battle-tested. Clean."
  rm -f "$FILTERED_JSON" "$OUTFILE_MD" 2>/dev/null || true
fi

print_divider

elif [[ "$TYPE" == "images" ]]; then
  IMAGES_JSON="${PATH_ARG:-${HOME}/.scan.images.json}"
  [[ -f "$IMAGES_JSON" ]] || { echo "‚ùå Images JSON file not found: $IMAGES_JSON"; exit 1; }

  if ! command -v jq &>/dev/null; then
    echo "‚ùå jq is required for images mode."
    exit 1
  fi

  images_len=$(jq length "$IMAGES_JSON")
  overall_found=0

    if [[ -n "$RADAR_IGNORE_FILE" ]]; then
      echo "‚ÑπÔ∏è  Using Vault Radar ignore file: $RADAR_IGNORE_FILE"
    else
      echo "‚ÑπÔ∏è  Using built-in ignore pattern: $BUILTIN_RADAR_IGNORES"
    fi

  # Remove master outfile if exists (fresh run)
  [[ -n "$USER_OUTFILE" && -f "$USER_OUTFILE" ]] && rm -f "$USER_OUTFILE"

  for ((i = 0; i < images_len; i++)); do
    name=$(jq -r ".[$i].name" "$IMAGES_JSON")
    image=$(jq -r ".[$i].image" "$IMAGES_JSON")
    tag=$(jq -r ".[$i].tag" "$IMAGES_JSON")
    image_ref="$image:$tag"
    name_safe="$(safe_name "$name")"

    if [[ "$FORMAT" == "md" ]]; then
      OUTFILE_JSON="scan_${name_safe}_${timestamp}.json"
      OUTFILE_MD="${USER_OUTFILE:-scan_${name_safe}_${timestamp}.md}"
    else
      OUTFILE_JSON="scan_${name_safe}_${timestamp}.${OUTPUT_FORMAT}"
      OUTFILE_MD=""
    fi

    scan_cmd=(vault-radar scan docker-image --image "$image_ref" --outfile "$OUTFILE_JSON" --format "$OUTPUT_FORMAT")
    [[ -n "$DISABLE_UI" ]] && scan_cmd+=("$DISABLE_UI")
    [[ -n "$OFFLINE" ]] && scan_cmd+=("$OFFLINE")
    echo "üîç Scanning docker image [$image_ref] ..."

    [[ -n "${DEBUG:-}" ]] && echo "[debug] ${scan_cmd[*]}"
    "${scan_cmd[@]}"

    FILTERED_JSON="${OUTFILE_JSON%.json}.filtered.json"
    filter_scan_output "$OUTFILE_JSON" "$FILTERED_JSON"

    # ---- AGGREGATE CSV LOGIC ----
    if [[ "$FORMAT" == "csv" ]]; then
      # Count number of findings in filtered CSV (excluding header)
      findings=$(tail -n +2 "$FILTERED_JSON" | wc -l | xargs)
      if [[ $i -eq 0 ]]; then
        cp "$FILTERED_JSON" "$USER_OUTFILE"
      else
        tail -n +2 "$FILTERED_JSON" >> "$USER_OUTFILE"
      fi
      # Remove filtered and original to keep things tidy
      rm -f "$FILTERED_JSON" "$OUTFILE_JSON"

      if [[ $findings -gt 0 ]]; then
        printf "üõë %s secrets found in docker image %s (see %s)\n" "$findings" "$image_ref" "$USER_OUTFILE"
        echo "‚ÑπÔ∏è  Scan output: $USER_OUTFILE"
        # Optionally, bullet listing as before:
        grep -v '^category' "$USER_OUTFILE" | tail -n "$findings" | awk -F, '{print "‚Ä¢ " $2 " in " $8 " (line: " $10 ")"}'
      else
        echo "‚úÖ No secrets found in docker image $image_ref."
        echo "üö¶ Battle-tested. Clean."
      fi
    else

      # Same logic as before for JSON/MD
      if [[ "$FORMAT" == "md" ]]; then
        findings=$(do_json_findings "$FILTERED_JSON")
      elif [[ "$OUTPUT_FORMAT" == "json" ]]; then
        findings=$(do_json_findings "$FILTERED_JSON")
      else
        findings=0
      fi

      findings="$(echo "$findings" | xargs)"
      if [[ $findings -gt 0 && -f "$FILTERED_JSON" ]]; then
        if [[ "$FORMAT" == "md" ]]; then
          render_markdown_report "$FILTERED_JSON" "$OUTFILE_MD" "$MD_TEMPLATE"
          printf "üõë %s secrets found in docker image %s (see %s)\n" "$findings" "$image_ref" "$OUTFILE_MD"
          echo "üìù Markdown report generated: $OUTFILE_MD"
          rm -f "$FILTERED_JSON"
        else
          printf "üõë %s secrets found in docker image %s (see %s)\n" "$findings" "$image_ref" "$FILTERED_JSON"
          echo "‚ÑπÔ∏è  Scan output: $FILTERED_JSON"
          [[ "$FORMAT" == "json" ]] && jq -c '.' "$FILTERED_JSON" | while read -r obj; do echo "$obj" | jq -r '"‚Ä¢ \(.category) in \(.path) (\(.textual_context // "-"))"'; done
        fi
        overall_found=$((overall_found + findings))
      else
        echo "‚úÖ No secrets found in docker image $image_ref."
        echo "üö¶ Battle-tested. Clean."
        rm -f "$FILTERED_JSON" "$OUTFILE_MD" 2>/dev/null || true
      fi
    fi

    print_divider
  done

  if [[ "$FORMAT" == "csv" && -f "$USER_OUTFILE" ]]; then
    # Optionally count overall findings for CSV (excluding header)
    overall_found=$(tail -n +2 "$USER_OUTFILE" | wc -l | xargs)
    [[ $overall_found -lt 0 ]] && overall_found=0
  fi

  echo
  echo "=== Scan complete. Total secrets found across all images: $overall_found ==="


# --- File/folder scan ---
elif [[ "$TYPE" == "file" || "$TYPE" == "folder" ]]; then
  [[ -z "$PATH_ARG" ]] && {
    echo "‚ùå Path required for --type $TYPE"
    show_help
    exit 1
  }
  name_safe="$(safe_name "$(basename "$PATH_ARG")")"

  if [[ "$FORMAT" == "md" ]]; then
    if [[ -n "$USER_OUTFILE" ]]; then
      OUTFILE_MD="${USER_OUTFILE%.md}.md"
      OUTFILE_JSON="${OUTFILE_MD%.md}.json"
    else
      OUTFILE_JSON="scan_${name_safe}_${timestamp}.json"
      OUTFILE_MD="scan_${name_safe}_${timestamp}.md"
    fi
    SCAN_OUT="$OUTFILE_JSON"
    REPORT_OUT="$OUTFILE_MD"
  else
    OUTFILE="${USER_OUTFILE:-scan_${name_safe}_${timestamp}.${OUTPUT_FORMAT}}"
    SCAN_OUT="$OUTFILE"
    REPORT_OUT=""
  fi

  scan_cmd=(vault-radar scan "$TYPE" --path "$PATH_ARG" --outfile "$SCAN_OUT" --format "$OUTPUT_FORMAT")
  [[ -n "$DISABLE_UI" ]] && scan_cmd+=("$DISABLE_UI")
  [[ -n "$OFFLINE" ]] && scan_cmd+=("$OFFLINE")
  echo "üîç Scanning [$TYPE] $PATH_ARG ..."
  [[ -n "${DEBUG:-}" ]] && echo "[debug] ${scan_cmd[*]}"
  "${scan_cmd[@]}"

  if [[ "$FORMAT" == "md" ]]; then
    findings=$(do_json_findings "$SCAN_OUT")
  elif [[ "$OUTPUT_FORMAT" == "csv" ]]; then
    findings=$(do_csv_findings "$SCAN_OUT")
  elif [[ "$OUTPUT_FORMAT" == "json" ]]; then
    findings=$(do_json_findings "$SCAN_OUT")
  else
    findings=0
  fi

  findings="$(echo "$findings" | xargs)"

  if [[ $findings -gt 0 && -f "$SCAN_OUT" ]]; then
    if [[ "$FORMAT" == "md" ]]; then
      render_markdown_report "$SCAN_OUT" "$REPORT_OUT" "$MD_TEMPLATE"
      printf "üõë %s secrets found in [%s] %s (see %s)\n" \
        "$findings" "$TYPE" "$PATH_ARG" "$REPORT_OUT"
      echo "üìù Markdown report generated: $REPORT_OUT"
      rm -f "$SCAN_OUT"
    else
      printf "üõë %s secrets found in [%s] (see %s)\n" \
        "$findings" "$TYPE" "$SCAN_OUT"

      echo "‚ÑπÔ∏è  Scan output: $SCAN_OUT"
      [[ "$FORMAT" == "csv" ]] && grep -v '^category' "$SCAN_OUT" | awk -F, '{print "‚Ä¢ " $2 " in " $8 " (line: " $10 ")"}'
      [[ "$FORMAT" == "json" ]] && jq -c '.' "$SCAN_OUT" | while read -r obj; do echo "$obj" | jq -r '"‚Ä¢ \(.category) in \(.path) (\(.textual_context // "-"))"'; done
    fi
  else
    echo "‚úÖ No secrets found in [$TYPE] $PATH_ARG."
    echo "üö¶ Battle-tested. Clean."
    rm -f "$SCAN_OUT" "$REPORT_OUT" 2>/dev/null || true
  fi

  print_divider

else
  echo "‚ùå Unknown --type: $TYPE"
  show_help
  exit 1
fi
